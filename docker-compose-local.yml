version: '3.8'

services:
  # Jenkins con Maven y Git preinstalado
  jenkins:
    image: jenkins/jenkins:lts-jdk17
    container_name: jenkins-local
    user: root
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/workspace
    environment:
      - JENKINS_OPTS=--httpPort=8080
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
    networks:
      - sgvet-network
    restart: unless-stopped

  # SonarQube Community Edition
  sonarqube:
    image: sonarqube:community
    container_name: sonarqube-local
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonarqube
      - SONAR_JDBC_USERNAME=sonarqube
      - SONAR_JDBC_PASSWORD=sonarqube
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    networks:
      - sgvet-network
    depends_on:
      - postgres
    restart: unless-stopped

  # Base de datos PostgreSQL para SonarQube
  postgres:
    image: postgres:13
    container_name: postgres-sonar
    environment:
      - POSTGRES_USER=sonarqube
      - POSTGRES_PASSWORD=sonarqube
      - POSTGRES_DB=sonarqube
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sgvet-network
    restart: unless-stopped

  # Maven para builds
  maven:
    image: maven:3.9.6-eclipse-temurin-17
    container_name: maven-local
    volumes:
      - ./:/workspace
      - maven_cache:/root/.m2
    working_dir: /workspace
    networks:
      - sgvet-network
    command: tail -f /dev/null

networks:
  sgvet-network:
    driver: bridge

volumes:
  jenkins_data:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
  postgres_data:
  maven_cache: